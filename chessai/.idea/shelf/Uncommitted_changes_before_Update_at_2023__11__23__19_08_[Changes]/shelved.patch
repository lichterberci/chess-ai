Index: src/main/java/chessai/chessai/lib/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chessai.chessai.lib;\r\n\r\nimport chessai.chessai.lib.pieces.*;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.text.ParseException;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class Board {\r\n\r\n    /**\r\n     * 0 = A8\r\n     * 1 = B8\r\n     * ...\r\n     * 8 = A7\r\n     * ...\r\n     * 63 = H1\r\n     */\r\n    Piece[] squares;\r\n    public PieceColor colorToMove;\r\n    public boolean canBlackCastleKingSide;\r\n    public boolean canBlackCastleQueenSide;\r\n    public boolean canWhiteCastleKingSide;\r\n    public boolean canWhiteCastleQueenSide;\r\n    public Square enPassantTarget;\r\n    public int fullMoveClock;\r\n    public int halfMoveCounter;\r\n    public List<Integer> previousPositionHashes;\r\n    public BitMap whitePieces;\r\n    public BitMap blackPieces;\r\n    public BitMap whiteKing;\r\n    public BitMap blackKing;\r\n    public BitMap whiteAttackSquares;\r\n    public BitMap blackAttackSquares;\r\n    private GameState cachedGameState;\r\n    private List<Move> cachedLegalMoves;\r\n    private int cachedHash;\r\n\r\n    public Board(Board other) {\r\n        this(other.squares,\r\n                other.colorToMove,\r\n                other.canBlackCastleKingSide,\r\n                other.canBlackCastleQueenSide,\r\n                other.canWhiteCastleKingSide,\r\n                other.canWhiteCastleQueenSide,\r\n                other.enPassantTarget,\r\n                other.fullMoveClock,\r\n                other.halfMoveCounter,\r\n                other.previousPositionHashes,\r\n                other.whitePieces,\r\n                other.blackPieces,\r\n                other.whiteKing,\r\n                other.blackKing,\r\n                other.whiteAttackSquares,\r\n                other.blackAttackSquares,\r\n                other.cachedLegalMoves,\r\n                other.cachedGameState,\r\n                other.cachedHash);\r\n    }\r\n\r\n    public Board(Piece[] squares,\r\n                 PieceColor colorToMove,\r\n                 boolean canBlackCastleKingSide,\r\n                 boolean canBlackCastleQueenSide,\r\n                 boolean canWhiteCastleKingSide,\r\n                 boolean canWhiteCastleQueenSide,\r\n                 Square enPassantTarget,\r\n                 int fullMoveClock,\r\n                 int halfMoveCounter,\r\n                 List<Integer> previousPositionHashes,\r\n                 BitMap whitePieces,\r\n                 BitMap blackPieces,\r\n                 BitMap whiteKing,\r\n                 BitMap blackKing,\r\n                 BitMap whiteAttackSquares,\r\n                 BitMap blackAttackSquares, List<Move> cachedLegalMoves, GameState cachedGameState, int cachedHash) {\r\n\r\n        this.squares = new Piece[64];\r\n\r\n        for (int i = 0; i < 64; i++) {\r\n            if (squares[i] == null)\r\n                continue;\r\n\r\n            this.squares[i] = squares[i].copy();\r\n            this.squares[i].setSquare(new Square(i));\r\n//            try {\r\n//                this.squares[i] = squares[i].getClass().getConstructor(PieceColor.class).newInstance(squares[i].getColor());\r\n//            } catch (Exception e) {\r\n//                System.err.println(e.getMessage());\r\n//            }\r\n        }\r\n\r\n        this.colorToMove = colorToMove;\r\n        this.canBlackCastleKingSide = canBlackCastleKingSide;\r\n        this.canBlackCastleQueenSide = canBlackCastleQueenSide;\r\n        this.canWhiteCastleKingSide = canWhiteCastleKingSide;\r\n        this.canWhiteCastleQueenSide = canWhiteCastleQueenSide;\r\n        this.enPassantTarget = enPassantTarget;\r\n        this.fullMoveClock = fullMoveClock;\r\n        this.halfMoveCounter = halfMoveCounter;\r\n        this.previousPositionHashes = new LinkedList<>();\r\n        if (previousPositionHashes != null)\r\n            this.previousPositionHashes.addAll(previousPositionHashes);\r\n        this.whitePieces = whitePieces != null ? new BitMap(whitePieces.getData()) : null;\r\n        this.blackPieces = blackPieces != null ? new BitMap(blackPieces.getData()) : null;\r\n        this.whiteKing = whiteKing != null ? new BitMap(whiteKing.getData()) : null;\r\n        this.blackKing = blackKing != null ? new BitMap(blackKing.getData()) : null;\r\n        this.whiteAttackSquares = whiteAttackSquares != null ? new BitMap(whiteAttackSquares.getData()) : null;\r\n        this.blackAttackSquares = blackAttackSquares != null ? new BitMap(blackAttackSquares.getData()) : null;\r\n        this.cachedLegalMoves = cachedLegalMoves != null ? new ArrayList<>(cachedLegalMoves) : null;\r\n        this.cachedGameState = cachedGameState;\r\n        this.cachedHash = cachedHash;\r\n    }\r\n\r\n    public Board(String fenString) throws ParseException {\r\n        setFromFENString(fenString);\r\n    }\r\n\r\n    public Piece get(@NotNull Square square) {\r\n        if (square.getIndex() == -1)\r\n            return null;\r\n        return squares[square.getIndex()];\r\n    }\r\n\r\n    public Piece get(int index) {\r\n        if (index == -1)\r\n            return null;\r\n        return squares[index];\r\n    }\r\n    public Optional<PieceColor> getColorAtSquare(Square square) {\r\n        if (squares[square.getIndex()] == null)\r\n            return Optional.empty();\r\n        return Optional.of(squares[square.getIndex()].color);\r\n    }\r\n\r\n    public Optional<PieceColor> getColorAtSquare(int index) {\r\n        return Optional.ofNullable(squares[index]).map(Piece::getColor);\r\n    }\r\n\r\n    public Optional<PieceColor> getColorAtSquare(int file, int row) {\r\n        return Optional.ofNullable(squares[file + (7 - row) * 8]).map(Piece::getColor);\r\n    }\r\n\r\n    public boolean isKingInCheck(PieceColor color) {\r\n\r\n        if (whiteAttackSquares == null || blackAttackSquares == null) {\r\n            generateAttackMapsForBothSides();\r\n        }\r\n\r\n        return color == PieceColor.WHITE ? blackAttackSquares.and(whiteKing).isNonZero() : whiteAttackSquares.and(blackKing).isNonZero();\r\n    }\r\n\r\n    private void generateAttackMapsForBothSides() {\r\n        whiteAttackSquares = new BitMap(0);\r\n        blackAttackSquares = new BitMap(0);\r\n\r\n        for (int index : whitePieces.getIndexesOfOnes()) {\r\n            Piece whitePiece = squares[index];\r\n\r\n            MoveResult moveResult = whitePiece.getPseudoLegalMoves(this);\r\n\r\n            whiteAttackSquares.orInPlace(moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere());\r\n        }\r\n\r\n        for (int index : blackPieces.getIndexesOfOnes()) {\r\n            Piece blackPiece = squares[index];\r\n\r\n            MoveResult moveResult = blackPiece.getPseudoLegalMoves(this);\r\n\r\n            blackAttackSquares.orInPlace(moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere());\r\n        }\r\n    }\r\n\r\n    public GameState getState() {\r\n\r\n        if (cachedGameState != null)\r\n            return cachedGameState;\r\n\r\n        if (halfMoveCounter >= 100) {\r\n            cachedGameState = GameState.DRAW;\r\n            return GameState.DRAW;\r\n        }\r\n\r\n        // look for 3 fold repetition\r\n        int countOfCurrentPosition = 1;\r\n\r\n        int currentHash = hashCode();\r\n\r\n        for (int hash : previousPositionHashes)\r\n            if (hash == currentHash && countOfCurrentPosition < 3)\r\n                countOfCurrentPosition++;\r\n\r\n        if (countOfCurrentPosition == 3)\r\n            return GameState.DRAW;\r\n\r\n        LinkedList<Piece> piecesWithRightColor = new LinkedList<>();\r\n        LinkedList<Piece> piecesWithOppositeColor = new LinkedList<>();\r\n\r\n        for (Piece square : squares) {\r\n            if (square != null) {\r\n                if (square.getColor() == colorToMove) {\r\n                    piecesWithRightColor.add(square);\r\n                } else {\r\n                    piecesWithOppositeColor.add(square);\r\n                }\r\n            }\r\n        }\r\n\r\n        int numRightColorPieces = piecesWithRightColor.size();\r\n        int numOppositeColorPieces = piecesWithOppositeColor.size();\r\n\r\n        if (numRightColorPieces == 1 && numOppositeColorPieces == 1) {\r\n            cachedGameState = GameState.DRAW;\r\n            return GameState.DRAW;\r\n        }\r\n\r\n        boolean canRightWin = canRightColorWin(numRightColorPieces, piecesWithRightColor);\r\n        boolean canOppositeWin = canOppositeColorWin(numOppositeColorPieces, piecesWithOppositeColor);\r\n\r\n        if (!canRightWin && !canOppositeWin) {\r\n            cachedGameState = GameState.DRAW;\r\n            return GameState.DRAW;\r\n        }\r\n\r\n        boolean hasMoves = !getLegalMoves().isEmpty();\r\n\r\n        if (hasMoves) {\r\n            cachedGameState = GameState.PLAYING;\r\n            return GameState.PLAYING;\r\n        }\r\n\r\n        boolean isKingInCheck = isKingInCheck(colorToMove);\r\n\r\n        if (!isKingInCheck) {\r\n            cachedGameState = GameState.DRAW;\r\n            return GameState.DRAW;\r\n        }\r\n\r\n        GameState result = colorToMove == PieceColor.WHITE ? GameState.BLACK_WIN : GameState.WHITE_WIN;\r\n\r\n        cachedGameState = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    private static boolean canRightColorWin(int numRightColorPieces, LinkedList<Piece> piecesWithRightColor) {\r\n        boolean canRightWin = true;\r\n        if (numRightColorPieces == 2) {\r\n            for (Piece rightPiece : piecesWithRightColor)\r\n                if (rightPiece instanceof Bishop || rightPiece instanceof Knight) {\r\n                    canRightWin = false;\r\n                    break;\r\n                }\r\n        }\r\n        return canRightWin;\r\n    }\r\n\r\n    private static boolean canOppositeColorWin(int numOppositeColorPieces, LinkedList<Piece> piecesWithOppositeColor) {\r\n        boolean canOppositeWin = true;\r\n        if (numOppositeColorPieces == 2) {\r\n            for (Piece oppositePiece : piecesWithOppositeColor)\r\n                if (oppositePiece instanceof Bishop || oppositePiece instanceof Knight) {\r\n                    canOppositeWin = false;\r\n                    break;\r\n                }\r\n        }\r\n        return canOppositeWin;\r\n    }\r\n\r\n    public void generateAttackSquare() {\r\n\r\n        PieceColor realColorToMove = colorToMove;\r\n\r\n        if (whiteAttackSquares == null) {\r\n            whiteAttackSquares = new BitMap(0);\r\n\r\n            colorToMove = PieceColor.WHITE;\r\n\r\n            for (int index = 0; index < 64; index++) {\r\n\r\n                if (!whitePieces.getBit(index))\r\n                    continue;\r\n\r\n                Piece whitePiece = squares[index];\r\n\r\n                MoveResult moveResult = whitePiece.getPseudoLegalMoves(this);\r\n\r\n                whiteAttackSquares.orInPlace(moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere());\r\n            }\r\n        }\r\n        if (blackAttackSquares == null) {\r\n            blackAttackSquares = new BitMap(0);\r\n\r\n            colorToMove = PieceColor.BLACK;\r\n\r\n            for (int index = 0; index < 64; index++) {\r\n\r\n                if (!blackPieces.getBit(index))\r\n                    continue;\r\n\r\n                Piece whitePiece = squares[index];\r\n\r\n                MoveResult moveResult = whitePiece.getPseudoLegalMoves(this);\r\n\r\n                blackAttackSquares.orInPlace(moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere());\r\n            }\r\n        }\r\n\r\n        colorToMove = realColorToMove;\r\n    }\r\n\r\n    public List<Move> getLegalMoves() {\r\n\r\n        if (cachedLegalMoves != null)\r\n            return cachedLegalMoves;\r\n\r\n        BitMap enemyPieces;\r\n        BitMap checkTrackForOurKing;\r\n        BitMap enemyDoubleAttackSquares = new BitMap(0);\r\n        BitMap pinMapForOurPieces;\r\n        BitMap ourPieces;\r\n        BitMap ourKing;\r\n        BitMap enemyPiecesGivingCheck = new BitMap(0);\r\n        BitMap uncapturableEnPassantTarget = new BitMap(0);\r\n        BitMap enemyAttackSquares = new BitMap(0);\r\n\r\n        if (colorToMove == PieceColor.WHITE) {\r\n            enemyPieces = blackPieces;\r\n            ourPieces = whitePieces;\r\n            ourKing = whiteKing;\r\n            checkTrackForOurKing = new BitMap(0);\r\n            pinMapForOurPieces = new BitMap(0);\r\n        } else {\r\n            enemyPieces = whitePieces;\r\n            ourPieces = blackPieces;\r\n            ourKing = blackKing;\r\n            checkTrackForOurKing = new BitMap(0);\r\n            pinMapForOurPieces = new BitMap(0);\r\n        }\r\n\r\n        // generate moves for the other side, so we can determine whether we are in or will be in check\r\n        for (int index = 0; index < 64; index++) {\r\n\r\n            if (!enemyPieces.getBit(index))\r\n                continue;\r\n\r\n            Piece enemyPiece = squares[index];\r\n\r\n            MoveResult moveResult = enemyPiece.getPseudoLegalMoves(this);\r\n\r\n            checkTrackForOurKing.orInPlace(moveResult.checkTrack());\r\n            enemyDoubleAttackSquares.orInPlace(enemyAttackSquares.and(moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere()));\r\n            enemyAttackSquares.orInPlace(moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere());\r\n            pinMapForOurPieces.orInPlace(moveResult.pinMap());\r\n            uncapturableEnPassantTarget.orInPlace(moveResult.isEnPassantTargetUnCapturableBecausePin());\r\n\r\n            if (moveResult.attackTargetsWhilePretendingTheEnemyKingIsNotThere().and(ourKing).isNonZero())\r\n                enemyPiecesGivingCheck.setBitInPlace(index, true);\r\n        }\r\n\r\n        if (colorToMove == PieceColor.WHITE)\r\n            blackAttackSquares = enemyAttackSquares;\r\n        else\r\n            whiteAttackSquares = enemyAttackSquares;\r\n\r\n        // double check\r\n        if (enemyDoubleAttackSquares.and(ourKing).isNonZero()) {\r\n//            System.out.printf(\"%s is in double check%n\", colorToMove);\r\n            return generateMovesForDoubleCheckSituation(ourKing, enemyAttackSquares);\r\n        }\r\n\r\n        int ourKingIndex = ourKing.getFirstIndexOfOne();\r\n\r\n        List<Move> result = new LinkedList<>();\r\n\r\n        // we are in check, so only moves are\r\n        // - with the king\r\n        // - blocking\r\n        // - capturing the piece giving check\r\n        if (enemyAttackSquares.and(ourKing).isNonZero()) {\r\n//            System.out.printf(\"%s is in check%n\", colorToMove);\r\n            generateMovesForSingleCheckSituation(ourPieces,\r\n                    enemyAttackSquares,\r\n                    result,\r\n                    checkTrackForOurKing,\r\n                    enemyPiecesGivingCheck,\r\n                    uncapturableEnPassantTarget,\r\n                    ourKing,\r\n                    pinMapForOurPieces,\r\n                    ourKingIndex);\r\n        } else {\r\n//            System.out.printf(\"%s has a general situation%n\", colorToMove);\r\n            // general situation\r\n            generateMovesForGeneralSituation(pinMapForOurPieces,\r\n                    ourPieces,\r\n                    ourKing,\r\n                    uncapturableEnPassantTarget,\r\n                    enemyAttackSquares,\r\n                    result, ourKingIndex);\r\n        }\r\n\r\n        cachedLegalMoves = result;\r\n\r\n        return result;\r\n    }\r\n\r\n    private void generateMovesForGeneralSituation(BitMap pinMapForOurPieces,\r\n                                                  BitMap ourPieces,\r\n                                                  BitMap ourKing,\r\n                                                  BitMap uncapturableEnPassantTarget,\r\n                                                  BitMap enemyAttackSquares,\r\n                                                  List<Move> result, int ourKingIndex) {\r\n        for (int ourPieceIndex = 0; ourPieceIndex < 64; ourPieceIndex++) {\r\n\r\n            if (!ourPieces.getBit(ourPieceIndex))\r\n                continue;\r\n\r\n            Piece ourPiece = squares[ourPieceIndex];\r\n\r\n            if (ourKing.getBit(ourPieceIndex)) {\r\n                generateKingMovesForGeneralSituation(ourPieceIndex,\r\n                        enemyAttackSquares,\r\n                        result);\r\n            } else {\r\n                generateNonKingMovesForGeneralSituation(ourPieceIndex,\r\n                        pinMapForOurPieces,\r\n                        ourPiece,\r\n                        result,\r\n                        uncapturableEnPassantTarget,\r\n                        ourKingIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void generateNonKingMovesForGeneralSituation(int ourPieceIndex,\r\n                                                         BitMap pinMapForOurPieces,\r\n                                                         Piece ourPiece,\r\n                                                         List<Move> result,\r\n                                                         BitMap uncapturableEnPassantTarget,\r\n                                                         int ourKingIndex) {\r\n\r\n        MoveResult moveResult = squares[ourPieceIndex].getPseudoLegalMoves(this);\r\n\r\n        BitMap validMoveSquares = pinMapForOurPieces.getBit(ourPieceIndex) ?\r\n                moveResult.moveTargets().and(pinMapForOurPieces).and(BitMap.getLineThroughSquares(ourKingIndex, ourPieceIndex))\r\n                : moveResult.moveTargets();\r\n\r\n        generateNonKingMovesForWithGivenMoveMap(ourPieceIndex,\r\n                ourPiece,\r\n                result,\r\n                uncapturableEnPassantTarget,\r\n                moveResult,\r\n                validMoveSquares);\r\n    }\r\n\r\n    private void generateNonKingMovesForWithGivenMoveMap(int ourPieceIndex,\r\n                                                         Piece ourPiece,\r\n                                                         List<Move> result,\r\n                                                         BitMap uncapturableEnPassantTarget,\r\n                                                         MoveResult moveResult,\r\n                                                         BitMap validMoveSquares) {\r\n        for (int index = 0; index < 64; index++) {\r\n\r\n            if (!validMoveSquares.getBit(index))\r\n                continue;\r\n\r\n            if (!(ourPiece instanceof Pawn)) {\r\n                result.add(new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        null,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ));\r\n                continue;\r\n            }\r\n\r\n            // we cannot move there, because it would be a pinned en passant\r\n            if (uncapturableEnPassantTarget.getBit(index)) {\r\n                continue;\r\n            }\r\n\r\n            if (moveResult.isResultPromotion().getBit(index)) {\r\n                result.add(new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        Knight.class,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ));\r\n                result.add(new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        Bishop.class,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ));\r\n                result.add(new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        Rook.class,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ));\r\n                result.add(new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        Queen.class,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ));\r\n                continue;\r\n            }\r\n\r\n            if (\r\n                    moveResult.isResultEnPassant().getBit(index)\r\n            ) {\r\n                result.add(new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        null,\r\n                        true,\r\n                        true,\r\n                        SpecialMove.NONE\r\n                ));\r\n                continue;\r\n            }\r\n\r\n            result.add(new Move(\r\n                    ourPieceIndex,\r\n                    index,\r\n                    null,\r\n                    moveResult.isResultCapture().getBit(index),\r\n                    false,\r\n                    moveResult.isResultDoublePawnMove().getBit(index) ? SpecialMove.DOUBLE_PAWN_PUSH : SpecialMove.NONE\r\n            ));\r\n\r\n        }\r\n    }\r\n\r\n    private void generateKingMovesForGeneralSituation(int ourPieceIndex,\r\n                                                      BitMap enemyAttackSquares,\r\n                                                      List<Move> result) {\r\n        MoveResult moveResult;\r\n        moveResult = squares[ourPieceIndex].getPseudoLegalMoves(this);\r\n\r\n        // we cannot move into another check, or castle from a check\r\n        BitMap normalMoves = moveResult.moveTargets()\r\n                .and(enemyAttackSquares.invert())\r\n                .and(moveResult.isResultKingSideCastle().invert())\r\n                .and(moveResult.isResultQueenSideCastle().invert());\r\n\r\n        // normal moves\r\n        result.addAll(normalMoves\r\n                .getIndexesOfOnes()\r\n                .stream()\r\n                .map(index -> new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        null,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ))\r\n                .toList());\r\n\r\n        // castling\r\n        BitMap kingSideCastlingMoves = moveResult.moveTargets().and(moveResult.isResultKingSideCastle());\r\n        BitMap queenSideCastlingMoves = moveResult.moveTargets().and(moveResult.isResultQueenSideCastle());\r\n\r\n        // white king side\r\n        if (colorToMove == PieceColor.WHITE\r\n                && kingSideCastlingMoves.isNonZero()\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"F1\"))\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"G1\"))\r\n        ) {\r\n            result.add(new Move(\r\n                    ourPieceIndex,\r\n                    Square.getIndex(\"G1\"),\r\n                    null,\r\n                    false,\r\n                    false,\r\n                    SpecialMove.KING_SIDE_CASTLE\r\n            ));\r\n        }\r\n\r\n        // black king side\r\n        if (colorToMove == PieceColor.BLACK\r\n                && kingSideCastlingMoves.isNonZero()\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"F8\"))\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"G8\"))\r\n        ) {\r\n            result.add(new Move(\r\n                    ourPieceIndex,\r\n                    Square.getIndex(\"G8\"),\r\n                    null,\r\n                    false,\r\n                    false,\r\n                    SpecialMove.KING_SIDE_CASTLE\r\n            ));\r\n        }\r\n\r\n\r\n        // white queen side\r\n        if (colorToMove == PieceColor.WHITE\r\n                && queenSideCastlingMoves.isNonZero()\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"C1\"))\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"D1\"))\r\n        ) {\r\n            result.add(new Move(\r\n                    ourPieceIndex,\r\n                    Square.getIndex(\"C1\"),\r\n                    null,\r\n                    false,\r\n                    false,\r\n                    SpecialMove.QUEEN_SIDE_CASTLE\r\n            ));\r\n        }\r\n\r\n        // black queen side\r\n        if (colorToMove == PieceColor.BLACK\r\n                && queenSideCastlingMoves.isNonZero()\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"C8\"))\r\n                && !enemyAttackSquares.getBit(Square.getIndex(\"D8\"))\r\n        ) {\r\n            result.add(new Move(\r\n                    ourPieceIndex,\r\n                    Square.getIndex(\"C8\"),\r\n                    null,\r\n                    false,\r\n                    false,\r\n                    SpecialMove.QUEEN_SIDE_CASTLE\r\n            ));\r\n        }\r\n    }\r\n\r\n    private void generateMovesForSingleCheckSituation(BitMap ourPieces,\r\n                                                      BitMap enemyAttackSquares,\r\n                                                      List<Move> result,\r\n                                                      BitMap checkTrackForOurKing,\r\n                                                      BitMap enemyPiecesGivingCheck,\r\n                                                      BitMap uncapturableEnPassantTarget,\r\n                                                      BitMap ourKing,\r\n                                                      BitMap pinMapForOurPieces,\r\n                                                      int ourKingIndex) {\r\n        for (int ourPieceIndex : ourPieces.getIndexesOfOnes()) {\r\n            Piece ourPiece = squares[ourPieceIndex];\r\n\r\n            if (ourKing.getBit(ourPieceIndex)) {\r\n                // we can capture, or run away\r\n                generateKingMovesForSingleCheckSituation(enemyAttackSquares,\r\n                        result,\r\n                        ourPieceIndex);\r\n            } else {\r\n                // we can block or capture\r\n                generateBlockingOrCapturingMovesForSingleCheckSituation(result,\r\n                        checkTrackForOurKing,\r\n                        enemyPiecesGivingCheck,\r\n                        ourPieceIndex,\r\n                        ourPiece,\r\n                        uncapturableEnPassantTarget,\r\n                        pinMapForOurPieces,\r\n                        ourKingIndex);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private void generateKingMovesForSingleCheckSituation(BitMap enemyAttackSquares, List<Move> result, int ourPieceIndex) {\r\n        MoveResult moveResult = squares[ourPieceIndex].getPseudoLegalMoves(this);\r\n\r\n        // we cannot move into another check, or castle from a check\r\n        BitMap validMoves = moveResult.moveTargets()\r\n                .and(enemyAttackSquares.invert())\r\n                .and(moveResult.isResultKingSideCastle().invert())\r\n                .and(moveResult.isResultQueenSideCastle().invert());\r\n\r\n        result.addAll(validMoves\r\n                .getIndexesOfOnes()\r\n                .stream()\r\n                .map(index -> new Move(\r\n                        ourPieceIndex,\r\n                        index,\r\n                        null,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ))\r\n                .toList());\r\n    }\r\n\r\n    private void generateBlockingOrCapturingMovesForSingleCheckSituation(List<Move> result,\r\n                                                                         BitMap checkTrackForOurKing,\r\n                                                                         BitMap enemyPiecesGivingCheck,\r\n                                                                         int ourPieceIndex,\r\n                                                                         Piece ourPiece,\r\n                                                                         BitMap uncapturableEnPassantTarget,\r\n                                                                         BitMap pinMapForOurPieces,\r\n                                                                         int ourKingIndex) {\r\n\r\n        MoveResult moveResult = squares[ourPieceIndex].getPseudoLegalMoves(this);\r\n\r\n        BitMap validMoves = moveResult.moveTargets()\r\n                .and(checkTrackForOurKing.or(enemyPiecesGivingCheck));\r\n\r\n        if (pinMapForOurPieces.getBit(ourPieceIndex)) {\r\n            // we can only move one the pin track\r\n            validMoves.andInPlace(pinMapForOurPieces);\r\n            // we have to remain on our pin track and not \"jump\" to another one\r\n            validMoves.andInPlace(BitMap.getLineThroughSquares(ourKingIndex, ourPieceIndex));\r\n        }\r\n\r\n        generateNonKingMovesForWithGivenMoveMap(ourPieceIndex, ourPiece, result, uncapturableEnPassantTarget, moveResult, validMoves);\r\n    }\r\n\r\n    @NotNull\r\n    private List<Move> generateMovesForDoubleCheckSituation(BitMap ourKing, BitMap enemyAttackSquares) {\r\n        final int ourKingIndex = ourKing.getFirstIndexOfOne();\r\n\r\n        // only the king can move\r\n        MoveResult moveResult = squares[ourKingIndex].getPseudoLegalMoves(this);\r\n\r\n        BitMap validMoves = moveResult.moveTargets().and(enemyAttackSquares.invert());\r\n\r\n        return validMoves\r\n                .getIndexesOfOnes()\r\n                .stream()\r\n                .map(index -> new Move(\r\n                        ourKingIndex,\r\n                        index,\r\n                        null,\r\n                        moveResult.isResultCapture().getBit(index),\r\n                        false,\r\n                        SpecialMove.NONE\r\n                ))\r\n                .toList();\r\n    }\r\n\r\n    public boolean isMoveLegal(Move move) {\r\n        if (cachedLegalMoves != null)\r\n            return cachedLegalMoves.contains(move);\r\n        return getLegalMoves().contains(move);\r\n    }\r\n\r\n    public Board makeMove(Move move) {\r\n\r\n        Square from = move.from();\r\n        Square to = move.to();\r\n\r\n        Piece movingPiece = squares[from.getIndex()];\r\n\r\n        if (movingPiece == null)\r\n            throw new IllegalStateException(\"Moving piece is null!\");\r\n\r\n        if (blackKing.getBit(move.toIndex()) || whiteKing.getBit(move.toIndex())) {\r\n            throw new IllegalArgumentException(\"We are trying to capture the king!\");\r\n        }\r\n\r\n        Board result = new Board(this);\r\n\r\n        result.enPassantTarget = null;\r\n        result.cachedGameState = null;\r\n        result.cachedLegalMoves = null;\r\n        result.whiteAttackSquares = null;\r\n        result.blackAttackSquares = null;\r\n\r\n        result.squares = getSquaresAfterMove(move, result, to);\r\n\r\n        updateBitMapsForMoves(move, result);\r\n\r\n        updateCastlingRightsForMove(move, movingPiece, result, from);\r\n\r\n        // en passant target detection\r\n        if (move.specialMove() == SpecialMove.DOUBLE_PAWN_PUSH)\r\n            result.enPassantTarget = new Square(from.file(), (from.row() + to.row()) / 2);\r\n\r\n        result.colorToMove = colorToMove == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE;\r\n\r\n        // move counts\r\n        if (move.isCapture() || movingPiece instanceof Pawn) {\r\n            result.halfMoveCounter = 0;\r\n            result.fullMoveClock = 0;\r\n        } else {\r\n            result.halfMoveCounter++;\r\n            if (result.halfMoveCounter % 2 == 0)\r\n                result.fullMoveClock++;\r\n        }\r\n\r\n        if (move.isCapture())\r\n            result.previousPositionHashes = new LinkedList<>();\r\n\r\n        result.previousPositionHashes.add(hashCode());\r\n\r\n        result.cachedHash = 0; // we could xor the pieces, but it will remain something for the future\r\n\r\n        return result;\r\n    }\r\n\r\n    private void updateCastlingRightsForMove(Move move, Piece movingPiece, Board result, Square from) {\r\n\r\n        if (movingPiece.getColor() == PieceColor.WHITE) {\r\n\r\n            if (movingPiece instanceof King) {\r\n                result.canWhiteCastleQueenSide = false;\r\n                result.canWhiteCastleKingSide = false;\r\n            } else if (movingPiece instanceof Rook) {\r\n                if (from.getIndex() == Square.getIndex(\"a1\"))\r\n                    result.canWhiteCastleQueenSide = false;\r\n                else if (from.getIndex() == Square.getIndex(\"h1\"))\r\n                    result.canWhiteCastleKingSide = false;\r\n            }\r\n\r\n        } else {\r\n\r\n            if (movingPiece instanceof King) {\r\n                result.canBlackCastleQueenSide = false;\r\n                result.canBlackCastleKingSide = false;\r\n            } else if (movingPiece instanceof Rook) {\r\n                if (from.getIndex() == Square.getIndex(\"a8\"))\r\n                    result.canBlackCastleQueenSide = false;\r\n                else if (from.getIndex() == Square.getIndex(\"h8\"))\r\n                    result.canBlackCastleKingSide = false;\r\n            }\r\n\r\n        }\r\n\r\n        if (move.isCapture() && (squares[move.toIndex()] instanceof Rook)) {\r\n            if (move.toIndex() == Square.getIndex(\"a1\"))\r\n                    result.canWhiteCastleQueenSide = false;\r\n            if (move.toIndex() == Square.getIndex(\"a8\"))\r\n                    result.canBlackCastleQueenSide = false;\r\n            if (move.toIndex() == Square.getIndex(\"h1\"))\r\n                    result.canWhiteCastleKingSide = false;\r\n            if (move.toIndex() == Square.getIndex(\"h8\"))\r\n                    result.canBlackCastleKingSide = false;\r\n        }\r\n    }\r\n\r\n    private void updateBitMapsForMoves(Move move, Board result) {\r\n\r\n        if (colorToMove == PieceColor.WHITE) {\r\n\r\n            result.whitePieces.setBitInPlace(move.fromIndex(), false);\r\n            result.whitePieces.setBitInPlace(move.toIndex(), true);\r\n\r\n            if (move.isEnPassant())\r\n                result.blackPieces.setBitInPlace(move.toIndex() + 8, false);\r\n            else if (move.isCapture())\r\n                result.blackPieces.setBitInPlace(move.toIndex(), false);\r\n\r\n            if (move.specialMove() == SpecialMove.KING_SIDE_CASTLE) {\r\n                result.whitePieces.setBitInPlace(Square.getIndex(\"H1\"), false);\r\n                result.whitePieces.setBitInPlace(Square.getIndex(\"F1\"), true);\r\n            } else if (move.specialMove() == SpecialMove.QUEEN_SIDE_CASTLE) {\r\n                result.whitePieces.setBitInPlace(Square.getIndex(\"A1\"), false);\r\n                result.whitePieces.setBitInPlace(Square.getIndex(\"D1\"), true);\r\n            }\r\n\r\n            // we are moving the king\r\n            if (whiteKing.getBit(move.fromIndex())) {\r\n                result.whiteKing = new BitMap(0).setBit(move.toIndex(), true);\r\n            }\r\n\r\n        } else {\r\n\r\n            result.blackPieces.setBitInPlace(move.fromIndex(), false);\r\n            result.blackPieces.setBitInPlace(move.toIndex(), true);\r\n\r\n            if (move.isEnPassant())\r\n                result.whitePieces.setBitInPlace(move.toIndex() - 8, false);\r\n            else if (move.isCapture())\r\n                result.whitePieces.setBitInPlace(move.toIndex(), false);\r\n\r\n            if (move.specialMove() == SpecialMove.KING_SIDE_CASTLE) {\r\n                result.blackPieces.setBitInPlace(Square.getIndex(\"H8\"), false);\r\n                result.blackPieces.setBitInPlace(Square.getIndex(\"F8\"), true);\r\n            } else if (move.specialMove() == SpecialMove.QUEEN_SIDE_CASTLE) {\r\n                result.blackPieces.setBitInPlace(Square.getIndex(\"A8\"), false);\r\n                result.blackPieces.setBitInPlace(Square.getIndex(\"D8\"), true);\r\n            }\r\n\r\n            // we are moving the king\r\n            if (blackKing.getBit(move.fromIndex())) {\r\n                result.blackKing = new BitMap(0).setBit(move.toIndex(), true);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private Piece[] getSquaresAfterMove(Move move, Board result, Square to) {\r\n        Piece[] newSquares = result.squares;\r\n\r\n        if (move.specialMove() == SpecialMove.NONE || move.specialMove() == SpecialMove.DOUBLE_PAWN_PUSH) {\r\n\r\n            if (move.isEnPassant()) {\r\n                newSquares[enPassantTarget.getIndex()] = newSquares[move.fromIndex()];\r\n                newSquares[enPassantTarget.getIndex()].setSquare(enPassantTarget);\r\n\r\n                if (colorToMove == PieceColor.WHITE) {\r\n                    newSquares[new Square(enPassantTarget.file(), enPassantTarget.row() - 1).getIndex()] = null;\r\n                } else {\r\n                    newSquares[new Square(enPassantTarget.file(), enPassantTarget.row() + 1).getIndex()] = null;\r\n                }\r\n            } else {\r\n                newSquares[move.toIndex()] = newSquares[move.fromIndex()];\r\n                newSquares[move.toIndex()].setSquare(to.copy());\r\n            }\r\n\r\n            newSquares[move.fromIndex()] = null;\r\n\r\n        } else if (move.specialMove() == SpecialMove.QUEEN_SIDE_CASTLE) {\r\n            if (colorToMove == PieceColor.WHITE) {\r\n                newSquares[Square.getIndex(\"d1\")] = newSquares[Square.getIndex(\"a1\")];\r\n                newSquares[Square.getIndex(\"d1\")].setSquare(new Square(\"d1\"));\r\n                newSquares[Square.getIndex(\"c1\")] = newSquares[Square.getIndex(\"e1\")];\r\n                newSquares[Square.getIndex(\"c1\")].setSquare(new Square(\"c1\"));\r\n                newSquares[Square.getIndex(\"e1\")] = null;\r\n                newSquares[Square.getIndex(\"a1\")] = null;\r\n            } else {\r\n                newSquares[Square.getIndex(\"d8\")] = newSquares[Square.getIndex(\"a8\")];\r\n                newSquares[Square.getIndex(\"d8\")].setSquare(new Square(\"d8\"));\r\n                newSquares[Square.getIndex(\"c8\")] = newSquares[Square.getIndex(\"e8\")];\r\n                newSquares[Square.getIndex(\"c8\")].setSquare(new Square(\"c8\"));\r\n                newSquares[Square.getIndex(\"e8\")] = null;\r\n                newSquares[Square.getIndex(\"a8\")] = null;\r\n            }\r\n        } else if (move.specialMove() == SpecialMove.KING_SIDE_CASTLE) {\r\n            if (colorToMove == PieceColor.WHITE) {\r\n                newSquares[Square.getIndex(\"f1\")] = newSquares[Square.getIndex(\"h1\")];\r\n                newSquares[Square.getIndex(\"f1\")].setSquare(new Square(\"f1\"));\r\n                newSquares[Square.getIndex(\"g1\")] = newSquares[Square.getIndex(\"e1\")];\r\n                newSquares[Square.getIndex(\"g1\")].setSquare(new Square(\"g1\"));\r\n                newSquares[Square.getIndex(\"e1\")] = null;\r\n                newSquares[Square.getIndex(\"h1\")] = null;\r\n            } else {\r\n                newSquares[Square.getIndex(\"f8\")] = newSquares[Square.getIndex(\"h8\")];\r\n                newSquares[Square.getIndex(\"f8\")].setSquare(new Square(\"f8\"));\r\n                newSquares[Square.getIndex(\"g8\")] = newSquares[Square.getIndex(\"e8\")];\r\n                newSquares[Square.getIndex(\"g8\")].setSquare(new Square(\"g8\"));\r\n                newSquares[Square.getIndex(\"e8\")] = null;\r\n                newSquares[Square.getIndex(\"h8\")] = null;\r\n            }\r\n        }\r\n\r\n        final boolean isPawnOnLastRow = colorToMove == PieceColor.WHITE ? move.from().row() == 6 : move.from().row() == 1;\r\n\r\n        if (move.promotionPieceType() != null && squares[move.fromIndex()] instanceof Pawn && isPawnOnLastRow) {\r\n            try {\r\n                newSquares[move.toIndex()] = move.promotionPieceType().getConstructor(PieceColor.class).newInstance(colorToMove);\r\n                newSquares[move.toIndex()].setSquare(to.copy());\r\n            } catch (Exception e) {\r\n                throw new IllegalStateException(e);\r\n            }\r\n        }\r\n        return newSquares;\r\n    }\r\n\r\n    public Optional<Move> tryToInferMove(Square from, Square to, Class<? extends Piece> promotedPieceType) {\r\n\r\n        if (from.getIndex() == to.getIndex())\r\n            return Optional.empty();\r\n\r\n        Piece movingPiece = get(from);\r\n\r\n        Piece pieceOnDestinationSquare = get(to);\r\n\r\n        System.out.println(movingPiece + \" \" + colorToMove);\r\n\r\n        if (movingPiece == null || movingPiece.getColor() != colorToMove)\r\n            return Optional.empty();\r\n\r\n        boolean isPotentiallyEnPassant = movingPiece instanceof Pawn && to.equals(enPassantTarget) && pieceOnDestinationSquare == null;\r\n\r\n        boolean isPotentiallyNonEnPassantCapture = pieceOnDestinationSquare != null && pieceOnDestinationSquare.color != colorToMove;\r\n\r\n        SpecialMove specialType = getInferredSpecialType(from, to, movingPiece);\r\n\r\n        boolean isPotentialPromotion = movingPiece instanceof Pawn && colorToMove == PieceColor.WHITE ? from.row() == 6 : from.row() == 1;\r\n\r\n        System.out.println(\"Our move:\");\r\n        System.out.println(new Move(from, to, isPotentialPromotion ? promotedPieceType : null, isPotentiallyNonEnPassantCapture || isPotentiallyEnPassant, isPotentiallyEnPassant, specialType));\r\n\r\n        return Optional.of(new Move(from, to, isPotentialPromotion ? promotedPieceType : null, isPotentiallyNonEnPassantCapture || isPotentiallyEnPassant, isPotentiallyEnPassant, specialType));\r\n    }\r\n\r\n    @NotNull\r\n    private SpecialMove getInferredSpecialType(Square from, Square to, Piece movingPiece) {\r\n\r\n        boolean isPotentialKingSideCastle = colorToMove == PieceColor.WHITE ? (\r\n                from.equals(new Square(\"e1\")) && to.equals(new Square(\"g1\")) && movingPiece instanceof King\r\n        ) : (\r\n                from.equals(new Square(\"e8\")) && to.equals(new Square(\"g8\")) && movingPiece instanceof King\r\n        );\r\n\r\n        boolean isPotentialQueenSideCastle = colorToMove == PieceColor.WHITE ? (\r\n                from.equals(new Square(\"e1\")) && to.equals(new Square(\"c1\")) && movingPiece instanceof King\r\n        ) : (\r\n                from.equals(new Square(\"e8\")) && to.equals(new Square(\"c8\")) && movingPiece instanceof King\r\n        );\r\n\r\n        boolean isPotentialDoublePawnMove = movingPiece instanceof Pawn && Math.abs(from.row() - to.row()) == 2;\r\n\r\n        SpecialMove specialType = SpecialMove.NONE;\r\n\r\n        if (isPotentialDoublePawnMove)\r\n            specialType = SpecialMove.DOUBLE_PAWN_PUSH;\r\n        if (isPotentialKingSideCastle)\r\n            specialType = SpecialMove.KING_SIDE_CASTLE;\r\n        if (isPotentialQueenSideCastle)\r\n            specialType = SpecialMove.QUEEN_SIDE_CASTLE;\r\n\r\n        return specialType;\r\n    }\r\n\r\n    public void setFromFENString(@NotNull String fenString) throws ParseException {\r\n\r\n        squares = new Piece[64];\r\n        whitePieces = new BitMap(0);\r\n        blackPieces = new BitMap(0);\r\n        whiteKing = new BitMap(0);\r\n        blackKing = new BitMap(0);\r\n\r\n        String[] fenStringParts = fenString.split(\" \");\r\n\r\n        if (fenStringParts.length != 6)\r\n            throw new ParseException(\"FEN string has invalid number of parts!\", 0);\r\n\r\n        // board part\r\n\r\n        int numSquaresDone = 0;\r\n        for (int i = 0; numSquaresDone < 64; i++) {\r\n\r\n            char c = fenStringParts[0].charAt(i);\r\n\r\n            if (c == '/') {\r\n\r\n                if (numSquaresDone % 8 != 0)\r\n                    throw new ParseException(\"Slash is at the wrong place!\", i);\r\n\r\n                continue;\r\n            }\r\n\r\n            if (c > '0' && c <= '8') {\r\n                numSquaresDone += (c - '0');\r\n\r\n                continue;\r\n            }\r\n\r\n            if (Character.isAlphabetic(c)) {\r\n                try {\r\n                    Piece newPiece = squares[numSquaresDone++] = PieceFactory.generateFromChar(c);\r\n                    newPiece.setSquare(new Square(numSquaresDone - 1));\r\n\r\n                    if (Character.isUpperCase(c)) {\r\n                        // white\r\n                        whitePieces.setBitInPlace(numSquaresDone - 1, true);\r\n\r\n                        if (c == 'K')\r\n                            whiteKing.setBitInPlace(numSquaresDone - 1, true);\r\n                    } else {\r\n                        blackPieces.setBitInPlace(numSquaresDone - 1, true);\r\n\r\n                        if (c == 'k')\r\n                            blackKing.setBitInPlace(numSquaresDone - 1, true);\r\n                    }\r\n                } catch (IllegalStateException e) {\r\n                    ParseException newException = new ParseException(\"Piece not recognized!\", i);\r\n                    newException.initCause(e);\r\n                    throw newException;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            throw new ParseException(\"Invalid character in FEN string: \" + c, i);\r\n        }\r\n\r\n        if (numSquaresDone != 64)\r\n            throw new ParseException(\"FEN does not describe all 64 squares!\", fenStringParts[0].length());\r\n\r\n        // next player to move\r\n\r\n        if (!List.of('w', 'b').contains(Character.toLowerCase(fenStringParts[1].charAt(0))))\r\n            throw new ParseException(\"Invalid side!\", 4);\r\n\r\n        colorToMove = fenStringParts[1].charAt(0) == 'w' ? PieceColor.WHITE : PieceColor.BLACK;\r\n\r\n        // castling rights\r\n\r\n        canBlackCastleKingSide = false;\r\n        canWhiteCastleKingSide = false;\r\n        canBlackCastleQueenSide = false;\r\n        canWhiteCastleQueenSide = false;\r\n\r\n        for (int i = 0; i < fenStringParts[2].length(); i++) {\r\n\r\n            char c = fenStringParts[2].charAt(i);\r\n\r\n            if (c == '-')\r\n                break;\r\n\r\n            switch (c) {\r\n                case 'K' -> canWhiteCastleKingSide = true;\r\n                case 'k' -> canBlackCastleKingSide = true;\r\n                case 'q' -> canBlackCastleQueenSide = true;\r\n                case 'Q' -> canWhiteCastleQueenSide = true;\r\n                default -> System.out.printf(\"WARNING: '%s' is an unexpected castling character!%n\", c);\r\n            }\r\n        }\r\n\r\n        // en passant\r\n\r\n        enPassantTarget = fenStringParts[3].charAt(0) == '-' ? null : new Square(fenStringParts[3]);\r\n\r\n        // half moves\r\n\r\n        halfMoveCounter = Integer.parseInt(fenStringParts[4]);\r\n        fullMoveClock = Integer.parseInt(fenStringParts[5]);\r\n\r\n        previousPositionHashes = new LinkedList<>();\r\n    }\r\n\r\n    public String getFENString() {\r\n        StringBuilder sb = new StringBuilder(40);\r\n\r\n        sb.append(getFENPositionString());\r\n\r\n        sb.append(' ');\r\n\r\n        sb.append(colorToMove == PieceColor.WHITE ? 'w' : 'b');\r\n\r\n        sb.append(' ');\r\n\r\n        if (canWhiteCastleKingSide)\r\n            sb.append('K');\r\n        if (canWhiteCastleQueenSide)\r\n            sb.append('Q');\r\n        if (canBlackCastleKingSide)\r\n            sb.append('k');\r\n        if (canBlackCastleQueenSide)\r\n            sb.append('q');\r\n\r\n        if (!canWhiteCastleQueenSide && !canWhiteCastleKingSide && !canBlackCastleKingSide && !canBlackCastleQueenSide)\r\n            sb.append('-');\r\n\r\n        sb.append(' ');\r\n\r\n        if (enPassantTarget != null)\r\n            sb.append(enPassantTarget);\r\n        else\r\n            sb.append('-');\r\n\r\n        sb.append(' ');\r\n\r\n        sb.append(halfMoveCounter);\r\n\r\n        sb.append(' ');\r\n\r\n        sb.append(fullMoveClock);\r\n\r\n        return sb.toString();\r\n\r\n    }\r\n\r\n    public String getFENPositionString() {\r\n        StringBuilder sb = new StringBuilder(32);\r\n\r\n        int emptySquaresCount = 0;\r\n        for (int i = 0; i < 64; i++) {\r\n            Piece piece = squares[i];\r\n\r\n            if (piece == null) {\r\n                emptySquaresCount++;\r\n\r\n                if (i % 8 == 7) {\r\n                    sb.append(emptySquaresCount);\r\n\r\n                    if (i != 63)\r\n                        sb.append('/');\r\n\r\n                    emptySquaresCount = 0;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (emptySquaresCount > 0) {\r\n                sb.append(emptySquaresCount);\r\n            }\r\n\r\n            emptySquaresCount = 0;\r\n            sb.append(squares[i].getFENChar());\r\n\r\n            if (i % 8 == 7 && i != 63)\r\n                sb.append('/');\r\n        }\r\n\r\n        return sb.toString();\r\n    }\r\n\r\n    public boolean shouldMoveBePromotion(Move move) {\r\n\r\n        Piece movingPiece = get(move.fromIndex());\r\n\r\n        if (!(movingPiece instanceof Pawn))\r\n            return false;\r\n\r\n        if (movingPiece.getColor() == PieceColor.WHITE)\r\n            return move.from().row() == 6 && move.to().row() == 7;\r\n        else\r\n            return move.from().row() == 1 && move.to().row() == 0;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n//\r\n//        if (cachedHash != 0)\r\n//            return cachedHash;\r\n\r\n        int hash = ZobristHash.computeHash(this);\r\n\r\n        cachedHash = hash;\r\n\r\n        return hash;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object other) {\r\n\r\n        if (other == null) return false;\r\n        if (other == this) return true;\r\n        if (!(other instanceof Board)) return false;\r\n        return other.hashCode() == hashCode();\r\n    }\r\n\r\n    public List<Move> withIsCheckSet(List<Move> moves, List<Board> boards) {\r\n\r\n        List<Move> result = new ArrayList<>(moves.size());\r\n\r\n        for (int i = 0; i < moves.size(); i++) {\r\n            Move move = moves.get(i);\r\n            result.add(withIsCheckSet(move, boards.get(i)));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public Move withIsCheckSet(Move move) {\r\n        return withIsCheckSet(move, null);\r\n    }\r\n\r\n    public Move withIsCheckSet(Move move, Board board) {\r\n        return move.withCheck((board != null ? board : this.makeMove(move))\r\n                .isKingInCheck(this.colorToMove == PieceColor.WHITE ? PieceColor.BLACK : PieceColor.WHITE));\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/chessai/chessai/lib/Board.java b/src/main/java/chessai/chessai/lib/Board.java
--- a/src/main/java/chessai/chessai/lib/Board.java	(revision 7405179543543a36c973afce95d8f8718bda774c)
+++ b/src/main/java/chessai/chessai/lib/Board.java	(date 1700562070932)
@@ -193,8 +193,10 @@
             if (hash == currentHash && countOfCurrentPosition < 3)
                 countOfCurrentPosition++;
 
-        if (countOfCurrentPosition == 3)
+        if (countOfCurrentPosition == 3) {
+            cachedGameState = GameState.DRAW
             return GameState.DRAW;
+        }
 
         LinkedList<Piece> piecesWithRightColor = new LinkedList<>();
         LinkedList<Piece> piecesWithOppositeColor = new LinkedList<>();
Index: src/main/java/chessai/chessai/lib/PGNBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/chessai/chessai/lib/PGNBuilder.java b/src/main/java/chessai/chessai/lib/PGNBuilder.java
new file mode 100644
--- /dev/null	(date 1700563334267)
+++ b/src/main/java/chessai/chessai/lib/PGNBuilder.java	(date 1700563334267)
@@ -0,0 +1,39 @@
+package chessai.chessai.lib;
+
+import java.time.LocalDate;
+import java.util.LinkedList;
+import java.util.List;
+
+public class PGNBuilder {
+
+	private static final String SITE_NAME = "Budapest";
+	private static final String EVENT_NAME = "Challange";
+	private Board board;
+	private final String whiteName;
+	private final String blackName;
+	private List<String> moveStrings;
+	private GameState result = GameState.PLAYING;
+	public PGNBuilder(Board board, String whiteName, String blackName) {
+		this.board = board;
+		this.whiteName = whiteName;
+		this.blackName = blackName;
+		this.moveStrings = new LinkedList<>();
+	}
+	public void addMove (Move move) {
+		this.board = board.makeMove(move);
+	}
+	public void setResult(GameState result) {
+		this.result = result;
+	}
+	public void buildString () {
+		StringBuilder sb = new StringBuilder();
+		sb.append("[Event %s]".formatted(EVENT_NAME));
+		sb.append("[Site %s]".formatted(SITE_NAME));
+		sb.append("[Date %s]".formatted(LocalDate.now().toString()));
+		sb.append("[White %s]".formatted(whiteName));
+		sb.append("[Black %s]".formatted(blackName));
+		sb.append("[Result %s]".formatted(switch (result) {
+			case WHITE_WIN ->
+		});
+	}
+}
Index: .idea/sonarlint/issuestore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n[\n+src/main/java/chessai/chessai/lib/Move.java\u0012,4\\8\\481190c87cb9b73935404546c9ddac94b5eee961\nc\n3src/main/java/chessai/chessai/lib/pieces/Queen.java\u0012,a\\3\\a31cb6a25ad445e386b17d712f70edf2b9e00cc2\nc\n3src/main/java/chessai/chessai/lib/SlidingPiece.java\u0012,5\\7\\5752c7e97cf9d2ac3ddc89b2ec7ce95ab5ce6698\ng\n7src/test/java/chessai/chessai/lib/pieces/QueenTest.java\u0012,5\\2\\520e414906d62dc600e88529020a552be5f5fd54\nb\n2src/main/java/chessai/chessai/lib/pieces/King.java\u0012,6\\1\\610d75ef226e756080dcbb7f3d1e481636b27ced\n]\n-src/main/java/chessai/chessai/lib/BitMap.java\u0012,4\\a\\4a1953d2d02b050aaf67c458786e265e0e47d627\na\n1src/test/java/chessai/chessai/lib/BitMapTest.java\u0012,b\\0\\b0f1a083a2a99949f622ee6f8d22f54c669245a6\n`\n0src/test/java/chessai/chessai/lib/BoardTest.java\u0012,9\\f\\9ff2cd56d980e681a42da9ef61bb70695d2cbffc\nm\n=src/test/java/chessai/chessai/engine/mates/MateInTwoTest.java\u0012,2\\f\\2fa8b27a9b689e7ea070c9b57f2c6b822a8b92fb\n]\n-src/main/java/chessai/chessai/lib/Square.java\u0012,5\\5\\55ee8cdf4a51cbf6b03baa4f921354590e6cd859\n\\\n,src/main/java/chessai/chessai/lib/Board.java\u0012,5\\2\\529fd6579586c8ae9ecd04f247679c0fbd30c238\nj\n:src/main/java/chessai/chessai/engine/MonteCarloEngine.java\u0012,9\\5\\9526e5f94c596518bf628d3b838151683c8c5689\nm\n=src/test/java/chessai/chessai/engine/mates/MateInOneTest.java\u0012,2\\a\\2a7a9958e264376ab6eb1ef36d08cba8baed1e3c\nf\n6src/main/java/chessai/chessai/swing_ui/BoardPanel.java\u0012,5\\b\\5b7a53119775d7f5293b753f3a47454e731ee3f6\n`\n0src/main/java/chessai/chessai/swing_ui/Menu.java\u0012,1\\2\\120c7b71494c333e04799f32a39cf7c3a7d1cb3e\nj\n:src/main/java/chessai/chessai/javafxUI/ui/GameManager.java\u0012,1\\5\\1553b64b5330b45dbebd0787be6e95467d0f36b0\n:\n\n.gitignore\u0012,a\\5\\a5cc2925ca8258af241be7e5b0381edf30266302\nn\n>src/main/java/chessai/chessai/javafxUI/ui/MainApplication.java\u0012,9\\0\\90679ce0e9ca70d3f0fc132220edc25b3c50ecd7\nk\n;src/main/java/chessai/chessai/swing_ui/MainApplication.java\u0012,1\\1\\11b36b960781a9d0d40a7bf9dd1369c29ff06ab1\ni\n9src/main/java/chessai/chessai/javafxUI/ui/PlayerType.java\u0012,2\\f\\2fdd4f423bf57262d2aa1f96a141d4b4ec39579d\nn\n>src/main/java/chessai/chessai/javafxUI/ui/BoardController.java\u0012,4\\8\\481d0cce522df93294c722e4d1880bf9d10ab212\nh\n8src/main/java/chessai/chessai/swing_ui/PvPGameFrame.java\u0012,e\\b\\ebb082b5135ae47dda57c11f7227348e955237c6\nk\n;src/main/java/chessai/chessai/swing_ui/GameEndedDialog.java\u0012,e\\f\\ef760e4dec209d0cc987f22e8617e6fb2f6cec09\nh\n8src/main/java/chessai/chessai/swing_ui/PvEGameFrame.java\u0012,d\\c\\dcf88c4ca4fa2d7d09077ffae300fdabbe93207c\ng\n7src/main/java/chessai/chessai/engine/MinimaxEngine.java\u0012,5\\c\\5c0ea53722fb9417decc018c71582d7271535737\nn\n>src/main/java/chessai/chessai/swing_ui/PromotionPopupMenu.java\u0012,2\\5\\25ddb484e028fa32184fe4540fafbe0b88041a20\nb\n2src/main/java/chessai/chessai/lib/ZobristHash.java\u0012,2\\3\\2334130939f948e48e8e4d3f76f2f19ec4436732\nl\n<src/main/java/chessai/chessai/engine/TranspositionTable.java\u0012,3\\4\\34abcee3ba414874379e8c1e1dc09e0e45df6f7b\np\n@src/test/java/chessai/chessai/engine/TranspositionTableTest.java\u0012,3\\3\\330fe99fb1abd151218371194836e6b1aa860772\na\n1src/main/java/chessai/chessai/lib/MoveResult.java\u0012,f\\5\\f581bda67b571d764f354d8c6c880f75594739f6\nd\n4src/main/java/chessai/chessai/swing_ui/Settings.java\u0012,8\\5\\8565b3fb19cb08c6b39fb52d750ee5e9bcc6bf22\n\\\n,src/main/java/chessai/chessai/lib/Piece.java\u0012,7\\2\\72500a126fbf80ed93b49ca2934e04923357110a\ne\n5src/main/java/chessai/chessai/engine/ChessEngine.java\u0012,0\\4\\04f456cc3713867d0abbfc301fc7871fba4f8657\nf\n6src/main/java/chessai/chessai/engine/RandomEngine.java\u0012,c\\0\\c0ec97bfc9546169edaf42528721d7ca405ca884
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
--- a/.idea/sonarlint/issuestore/index.pb	(revision 7405179543543a36c973afce95d8f8718bda774c)
+++ b/.idea/sonarlint/issuestore/index.pb	(date 1700566212370)
@@ -67,4 +67,8 @@
 e
 5src/main/java/chessai/chessai/engine/ChessEngine.java,0\4\04f456cc3713867d0abbfc301fc7871fba4f8657
 f
-6src/main/java/chessai/chessai/engine/RandomEngine.java,c\0\c0ec97bfc9546169edaf42528721d7ca405ca884
\ No newline at end of file
+6src/main/java/chessai/chessai/engine/RandomEngine.java,c\0\c0ec97bfc9546169edaf42528721d7ca405ca884
+C
+javadocs/index.html,1\3\132df09d7d82ac5554cf99fb55205aa94f80964e
+a
+1src/main/java/chessai/chessai/lib/PGNBuilder.java,6\0\601b47dfc9715d679d1d0e4fb633632ed405a906
\ No newline at end of file
Index: .idea/sonarlint/securityhotspotstore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n[\n+src/main/java/chessai/chessai/lib/Move.java\u0012,4\\8\\481190c87cb9b73935404546c9ddac94b5eee961\nc\n3src/main/java/chessai/chessai/lib/pieces/Queen.java\u0012,a\\3\\a31cb6a25ad445e386b17d712f70edf2b9e00cc2\nc\n3src/main/java/chessai/chessai/lib/SlidingPiece.java\u0012,5\\7\\5752c7e97cf9d2ac3ddc89b2ec7ce95ab5ce6698\ng\n7src/test/java/chessai/chessai/lib/pieces/QueenTest.java\u0012,5\\2\\520e414906d62dc600e88529020a552be5f5fd54\nb\n2src/main/java/chessai/chessai/lib/pieces/King.java\u0012,6\\1\\610d75ef226e756080dcbb7f3d1e481636b27ced\nm\n=src/test/java/chessai/chessai/engine/mates/MateInTwoTest.java\u0012,2\\f\\2fa8b27a9b689e7ea070c9b57f2c6b822a8b92fb\n]\n-src/main/java/chessai/chessai/lib/Square.java\u0012,5\\5\\55ee8cdf4a51cbf6b03baa4f921354590e6cd859\n]\n-src/main/java/chessai/chessai/lib/BitMap.java\u0012,4\\a\\4a1953d2d02b050aaf67c458786e265e0e47d627\n`\n0src/test/java/chessai/chessai/lib/BoardTest.java\u0012,9\\f\\9ff2cd56d980e681a42da9ef61bb70695d2cbffc\na\n1src/test/java/chessai/chessai/lib/BitMapTest.java\u0012,b\\0\\b0f1a083a2a99949f622ee6f8d22f54c669245a6\n\\\n,src/main/java/chessai/chessai/lib/Board.java\u0012,5\\2\\529fd6579586c8ae9ecd04f247679c0fbd30c238\nj\n:src/main/java/chessai/chessai/engine/MonteCarloEngine.java\u0012,9\\5\\9526e5f94c596518bf628d3b838151683c8c5689\nm\n=src/test/java/chessai/chessai/engine/mates/MateInOneTest.java\u0012,2\\a\\2a7a9958e264376ab6eb1ef36d08cba8baed1e3c\nf\n6src/main/java/chessai/chessai/swing_ui/BoardPanel.java\u0012,5\\b\\5b7a53119775d7f5293b753f3a47454e731ee3f6\n`\n0src/main/java/chessai/chessai/swing_ui/Menu.java\u0012,1\\2\\120c7b71494c333e04799f32a39cf7c3a7d1cb3e\nj\n:src/main/java/chessai/chessai/javafxUI/ui/GameManager.java\u0012,1\\5\\1553b64b5330b45dbebd0787be6e95467d0f36b0\n:\n\n.gitignore\u0012,a\\5\\a5cc2925ca8258af241be7e5b0381edf30266302\nn\n>src/main/java/chessai/chessai/javafxUI/ui/MainApplication.java\u0012,9\\0\\90679ce0e9ca70d3f0fc132220edc25b3c50ecd7\nk\n;src/main/java/chessai/chessai/swing_ui/MainApplication.java\u0012,1\\1\\11b36b960781a9d0d40a7bf9dd1369c29ff06ab1\ni\n9src/main/java/chessai/chessai/javafxUI/ui/PlayerType.java\u0012,2\\f\\2fdd4f423bf57262d2aa1f96a141d4b4ec39579d\nn\n>src/main/java/chessai/chessai/javafxUI/ui/BoardController.java\u0012,4\\8\\481d0cce522df93294c722e4d1880bf9d10ab212\nh\n8src/main/java/chessai/chessai/swing_ui/PvPGameFrame.java\u0012,e\\b\\ebb082b5135ae47dda57c11f7227348e955237c6\nk\n;src/main/java/chessai/chessai/swing_ui/GameEndedDialog.java\u0012,e\\f\\ef760e4dec209d0cc987f22e8617e6fb2f6cec09\nh\n8src/main/java/chessai/chessai/swing_ui/PvEGameFrame.java\u0012,d\\c\\dcf88c4ca4fa2d7d09077ffae300fdabbe93207c\ng\n7src/main/java/chessai/chessai/engine/MinimaxEngine.java\u0012,5\\c\\5c0ea53722fb9417decc018c71582d7271535737\nn\n>src/main/java/chessai/chessai/swing_ui/PromotionPopupMenu.java\u0012,2\\5\\25ddb484e028fa32184fe4540fafbe0b88041a20\nb\n2src/main/java/chessai/chessai/lib/ZobristHash.java\u0012,2\\3\\2334130939f948e48e8e4d3f76f2f19ec4436732\nl\n<src/main/java/chessai/chessai/engine/TranspositionTable.java\u0012,3\\4\\34abcee3ba414874379e8c1e1dc09e0e45df6f7b\np\n@src/test/java/chessai/chessai/engine/TranspositionTableTest.java\u0012,3\\3\\330fe99fb1abd151218371194836e6b1aa860772\na\n1src/main/java/chessai/chessai/lib/MoveResult.java\u0012,f\\5\\f581bda67b571d764f354d8c6c880f75594739f6\nd\n4src/main/java/chessai/chessai/swing_ui/Settings.java\u0012,8\\5\\8565b3fb19cb08c6b39fb52d750ee5e9bcc6bf22\n\\\n,src/main/java/chessai/chessai/lib/Piece.java\u0012,7\\2\\72500a126fbf80ed93b49ca2934e04923357110a\nf\n6src/main/java/chessai/chessai/engine/RandomEngine.java\u0012,c\\0\\c0ec97bfc9546169edaf42528721d7ca405ca884\ne\n5src/main/java/chessai/chessai/engine/ChessEngine.java\u0012,0\\4\\04f456cc3713867d0abbfc301fc7871fba4f8657
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/securityhotspotstore/index.pb b/.idea/sonarlint/securityhotspotstore/index.pb
--- a/.idea/sonarlint/securityhotspotstore/index.pb	(revision 7405179543543a36c973afce95d8f8718bda774c)
+++ b/.idea/sonarlint/securityhotspotstore/index.pb	(date 1700566212390)
@@ -67,4 +67,8 @@
 f
 6src/main/java/chessai/chessai/engine/RandomEngine.java,c\0\c0ec97bfc9546169edaf42528721d7ca405ca884
 e
-5src/main/java/chessai/chessai/engine/ChessEngine.java,0\4\04f456cc3713867d0abbfc301fc7871fba4f8657
\ No newline at end of file
+5src/main/java/chessai/chessai/engine/ChessEngine.java,0\4\04f456cc3713867d0abbfc301fc7871fba4f8657
+C
+javadocs/index.html,1\3\132df09d7d82ac5554cf99fb55205aa94f80964e
+a
+1src/main/java/chessai/chessai/lib/PGNBuilder.java,6\0\601b47dfc9715d679d1d0e4fb633632ed405a906
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AnalysisUIOptions\">\r\n    <option name=\"ANALYZE_TEST_SOURCES\" value=\"false\" />\r\n    <option name=\"ANALYZE_INJECTED_CODE\" value=\"false\" />\r\n    <option name=\"SCOPE_TYPE\" value=\"4\" />\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"51b73394-c481-4e9c-8c95-c585216fe0a8\" name=\"Changes\" comment=\"Stabilized minimax engine\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__18_47_[Changes]/529fd6579586c8ae9ecd04f247679c0fbd30c238\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__18_47_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__18_47__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__19_09_[Changes]/529fd6579586c8ae9ecd04f247679c0fbd30c238\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__19_09_[Changes]/shelved.patch\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__19_09__Changes_.xml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/5/2/529fd6579586c8ae9ecd04f247679c0fbd30c238\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/5/2/529fd6579586c8ae9ecd04f247679c0fbd30c238\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/9/5/9526e5f94c596518bf628d3b838151683c8c5689\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/sonarlint/issuestore/9/5/9526e5f94c596518bf628d3b838151683c8c5689\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/settings.dat\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/settings.dat\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/chessai/chessai/engine/MinimaxEngine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/chessai/chessai/engine/MinimaxEngine.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/chessai/chessai/swing_ui/Menu.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/chessai/chessai/swing_ui/Menu.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeInsightWorkspaceSettings\">\r\n    <option name=\"optimizeImportsOnTheFly\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view />\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n    <option name=\"RESET_MODE\" value=\"MIXED\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2VtzxiTdowyYVHWjUD9NF9Wc0ry\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SONARLINT_PRECOMMIT_ANALYSIS\": \"false\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\": \"JUnit5\",\r\n    \"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5\": \"\",\r\n    \"extract.method.default.visibility\": \"private\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"E:/chess-ai/chessai/src/test/java/chessai/chessai\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.editor.selected.configurable\": \"inlay.hints\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"chessai.chessai.swing_ui\" />\r\n      <recent name=\"chessai.chessai.lib\" />\r\n      <recent name=\"chessai.chessai.ui\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"E:\\chess-ai\\chessai\\src\\main\\resources\\chessai\\chessai\\swing_ui\\themes\" />\r\n      <recent name=\"E:\\chess-ai\\chessai\\src\\main\\resources\\chessai\\chessai\\swing_ui\\themes\\\" />\r\n      <recent name=\"E:\\chess-ai\\chessai\\src\\main\\resources\\chessai\\chessai\\swing_ui\" />\r\n      <recent name=\"E:\\chess-ai\\chessai\\src\\main\\resources\\chessai\\chessai\\swing_ui\\themes\\neo\" />\r\n      <recent name=\"E:\\chess-ai\\chessai\\javadocs\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"chessai.chessai.engine\" />\r\n      <recent name=\"chessai.chessai.lib\" />\r\n      <recent name=\"chessai.chessai.lib.pieces\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"chessai.chessai.swing_ui\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Application\">\r\n    <configuration name=\"Application\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"18\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"chessai.chessai.swing_ui.MainApplication\" />\r\n      <module name=\"chessai.main\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"BoardTest.getState\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;chessai.chessai.lib.BoardTest.getState&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"BoardTest.setIsCheckForMove\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;chessai.chessai.lib.BoardTest.setIsCheckForMove&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"MateInTwoTest.findMateInTwo\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;chessai.chessai.engine.mates.MateInTwoTest.findMateInTwo&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"TranspositionTableTest\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;chessai.chessai.engine.TranspositionTableTest&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"TranspositionTableTest.contains\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;chessai.chessai.engine.TranspositionTableTest.contains&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <ForceTestExec>false</ForceTestExec>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Tests\" type=\"JUnit\" factoryName=\"JUnit\">\r\n      <module name=\"chessai.test\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"18\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"\" />\r\n      <option name=\"METHOD_NAME\" value=\"\" />\r\n      <option name=\"TEST_OBJECT\" value=\"directory\" />\r\n      <dir value=\"$PROJECT_DIR$/src/test/java/chessai/chessai/lib\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Application\" />\r\n      <item itemvalue=\"Gradle.BoardTest.setIsCheckForMove\" />\r\n      <item itemvalue=\"Gradle.MateInTwoTest.findMateInTwo\" />\r\n      <item itemvalue=\"Gradle.TranspositionTableTest.contains\" />\r\n      <item itemvalue=\"Gradle.BoardTest.getState\" />\r\n      <item itemvalue=\"Gradle.TranspositionTableTest\" />\r\n      <item itemvalue=\"JUnit.Tests\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.MateInTwoTest.findMateInTwo\" />\r\n        <item itemvalue=\"Gradle.BoardTest.setIsCheckForMove\" />\r\n        <item itemvalue=\"Gradle.TranspositionTableTest.contains\" />\r\n        <item itemvalue=\"Gradle.BoardTest.getState\" />\r\n        <item itemvalue=\"Gradle.TranspositionTableTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SliceToolwindowSettings\">\r\n    <option name=\"autoScroll\" value=\"true\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"51b73394-c481-4e9c-8c95-c585216fe0a8\" name=\"Changes\" comment=\"Continued setup for lib\" />\r\n      <created>1695294335367</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1695294335367</updated>\r\n      <workItem from=\"1695294337663\" duration=\"75000\" />\r\n      <workItem from=\"1695294425563\" duration=\"3799000\" />\r\n      <workItem from=\"1695458800862\" duration=\"875000\" />\r\n      <workItem from=\"1695554864342\" duration=\"1248000\" />\r\n      <workItem from=\"1695724929388\" duration=\"105000\" />\r\n      <workItem from=\"1695821176587\" duration=\"3294000\" />\r\n      <workItem from=\"1695925093085\" duration=\"3220000\" />\r\n      <workItem from=\"1696587909313\" duration=\"871000\" />\r\n      <workItem from=\"1696611203043\" duration=\"12886000\" />\r\n      <workItem from=\"1696675091888\" duration=\"2428000\" />\r\n      <workItem from=\"1697531913500\" duration=\"149000\" />\r\n      <workItem from=\"1697538304237\" duration=\"203000\" />\r\n      <workItem from=\"1697553027529\" duration=\"1429000\" />\r\n      <workItem from=\"1698335575022\" duration=\"8235000\" />\r\n      <workItem from=\"1698409349664\" duration=\"225000\" />\r\n      <workItem from=\"1698483976298\" duration=\"102000\" />\r\n      <workItem from=\"1698503047911\" duration=\"4564000\" />\r\n      <workItem from=\"1698697079541\" duration=\"2501000\" />\r\n      <workItem from=\"1698757747299\" duration=\"2193000\" />\r\n      <workItem from=\"1699000536746\" duration=\"6145000\" />\r\n      <workItem from=\"1699379147998\" duration=\"9670000\" />\r\n      <workItem from=\"1700555960910\" duration=\"4578000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Updated onCommit actions\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695838662266</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695838662266</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Added GameManager and simplified resource loading\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695839786782</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695839786782</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Board clearing fixed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695840172409</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695840172409</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Game is almost fully playable (promotions needed)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695845052226</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695845052226</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Selection works and random engine added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695847878299</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695847878299</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Drag and drop implemented\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695927020535</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695927020535</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Put javadocs into seperate folder\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1695928401696</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695928401696</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Added monte carlo tree search\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696623795429</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696623795429</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Optimizing...\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696625182928</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696625182928</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Optimizing...\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696627440820</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696627440820</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Added check for draw enstates\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1696675541096</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1696675541096</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Added MoveResult class and extended BitMap functionality\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697454739223</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697454739223</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Added placeholder implementations of getPseudoLegalMovesAsBitMaps in piece classes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697455094560</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697455094560</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Augmented intelliJ warning set\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697455421607</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697455421607</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Implemented general sliding move generation (currently only on rook)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697456741559</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697456741559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Added SlidingPiece class and implemented sliding for Rook\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697473871162</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697473871162</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Updated gitignore to ignore sonarlint indexes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697532021103</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697532021104</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Fixed some bugs, but it is not yet near...\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697780435559</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697780435559</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"All tests pass!!!\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697786289895</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697786289895</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Double check is now correctly determined\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1697786627198</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1697786627198</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Random bullshit that sonarlint added\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698335664250</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698335664250</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"Fixed en passant pinning and removed deprecated methods\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698339935824</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698339935824</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"Updated method names\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698340321340</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698340321340</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"Removed some more old code and added some tests\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698341382366</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698341382366</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"Resolved kingmap issues\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698342293652</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698342293652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"All tests pass, fixed linemap issue\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698583248246</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698583248246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"Minor changes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698607053912</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698607053912</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"Fixed empty move error and fixed monte carlo search\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698655617483</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698655617483</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"Monte carlo MVP is ready, time to migrate UI\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698656063399</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698656063399</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"Images are displayed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698661052147</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698661052147</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"Fixed MCTS and optimized some things\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698507172783</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698507172783</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"Minor changes\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698683677917</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698683677917</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00042\" summary=\"Changed mate in 2 test's hyperparams a bit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698684012293</created>\r\n      <option name=\"number\" value=\"00042\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698684012293</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00043\" summary=\"Images are almost ready\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698699975451</created>\r\n      <option name=\"number\" value=\"00043\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698699975451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00044\" summary=\"Added SVGs, but they don't work :/\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698767820550</created>\r\n      <option name=\"number\" value=\"00044\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698767820550</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00045\" summary=\"Still trying to center the images... :(\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698768033544</created>\r\n      <option name=\"number\" value=\"00045\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698768033544</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00046\" summary=\"Started work on GameVsPlayerFrame\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1698768319715</created>\r\n      <option name=\"number\" value=\"00046\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698768319715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00047\" summary=\"It is somewhat playable and looks somewhat good\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699004669385</created>\r\n      <option name=\"number\" value=\"00047\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699004669385</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00048\" summary=\"Extracted GameEndedDialog to its own class and file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699463190799</created>\r\n      <option name=\"number\" value=\"00048\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699463190799</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00049\" summary=\"Sonarlint bs\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699379235780</created>\r\n      <option name=\"number\" value=\"00049\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00049\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699379235780</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00050\" summary=\"Fixed image alignment issues\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699380342940</created>\r\n      <option name=\"number\" value=\"00050\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699380342940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00051\" summary=\"Promotion works now\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699385630866</created>\r\n      <option name=\"number\" value=\"00051\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00051\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699385630866</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00052\" summary=\"Added game ended modal\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699388303921</created>\r\n      <option name=\"number\" value=\"00052\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00052\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699388303921</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00053\" summary=\"Added transosition table and fixed minimax\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699543011928</created>\r\n      <option name=\"number\" value=\"00053\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00053\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699543011930</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00054\" summary=\"Fixed transpositiontable hashing\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1699898213361</created>\r\n      <option name=\"number\" value=\"00054\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00054\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1699898213361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00055\" summary=\"Added darker layer color on black tiles\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700498035763</created>\r\n      <option name=\"number\" value=\"00055\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00055\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700498035764</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00056\" summary=\"Added move ordering for monte carlo engine\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700500400491</created>\r\n      <option name=\"number\" value=\"00056\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00056\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700500400491</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00057\" summary=\"Implemented delta pruning (but it seems too good...)\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700503677046</created>\r\n      <option name=\"number\" value=\"00057\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00057\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700503677046</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00058\" summary=\"Stabilized minimax engine\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700506888841</created>\r\n      <option name=\"number\" value=\"00058\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00058\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700506888841</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"59\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Fixed some bugs, but it is not yet near...\" />\r\n    <MESSAGE value=\"All tests pass!!!\" />\r\n    <MESSAGE value=\"Double check is now correctly determined\" />\r\n    <MESSAGE value=\"Random bullshit that sonarlint added\" />\r\n    <MESSAGE value=\"Fixed en passant pinning and removed deprecated methods\" />\r\n    <MESSAGE value=\"Updated method names\" />\r\n    <MESSAGE value=\"Removed some more old code and added some tests\" />\r\n    <MESSAGE value=\"Resolved kingmap issues\" />\r\n    <MESSAGE value=\"Fixed bitmap issues\" />\r\n    <MESSAGE value=\"Mate in two is found :)\" />\r\n    <MESSAGE value=\"Workspace changes\" />\r\n    <MESSAGE value=\"Fixed MCTS and optimized some things\" />\r\n    <MESSAGE value=\"Changed mate in 2 test's hyperparams a bit\" />\r\n    <MESSAGE value=\"Images are almost ready\" />\r\n    <MESSAGE value=\"Added SVGs, but they don't work :/\" />\r\n    <MESSAGE value=\"Still trying to center the images... :(\" />\r\n    <MESSAGE value=\"Started work on GameVsPlayerFrame\" />\r\n    <MESSAGE value=\"It is somewhat playable and looks somewhat good\" />\r\n    <MESSAGE value=\"Extracted GameEndedDialog to its own class and file\" />\r\n    <MESSAGE value=\"Added transosition table and fixed minimax\" />\r\n    <MESSAGE value=\"Fixed transpositiontable hashing\" />\r\n    <MESSAGE value=\"Added darker layer color on black tiles\" />\r\n    <MESSAGE value=\"Added move ordering for monte carlo engine\" />\r\n    <MESSAGE value=\"Implemented delta pruning (but it seems too good...)\" />\r\n    <MESSAGE value=\"Stabilized minimax engine\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Stabilized minimax engine\" />\r\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <option name=\"REFORMAT_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.UnsupportedOperationException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"8\" />\r\n        </breakpoint>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\r\n          <option name=\"timeStamp\" value=\"9\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"java.util.stream.ReferencePipeline$Head\" memberName=\"combinedFlags\" />\r\n        <PinnedItemInfo parentTag=\"chessai.chessai.lib.MoveResult\" memberName=\"moveTargets\" />\r\n        <PinnedItemInfo parentTag=\"chessai.chessai.lib.Board\" memberName=\"squares\" />\r\n        <PinnedItemInfo parentTag=\"chessai.chessai.lib.BitMap\" memberName=\"data\" />\r\n        <PinnedItemInfo parentTag=\"chessai.chessai.engine.MinimaxEngine\" memberName=\"maxDepth\" />\r\n        <PinnedItemInfo parentTag=\"chessai.chessai.lib.Square\" memberName=\"squareData\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/chessai$Tests.ic\" NAME=\"Tests Coverage Results\" MODIFIED=\"1695927057241\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/chessai$Application.ic\" NAME=\"Application Coverage Results\" MODIFIED=\"1696621915646\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7405179543543a36c973afce95d8f8718bda774c)
+++ b/.idea/workspace.xml	(date 1700762909293)
@@ -9,19 +9,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="51b73394-c481-4e9c-8c95-c585216fe0a8" name="Changes" comment="Stabilized minimax engine">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__18_47_[Changes]/529fd6579586c8ae9ecd04f247679c0fbd30c238" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__18_47_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__18_47__Changes_.xml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__19_09_[Changes]/529fd6579586c8ae9ecd04f247679c0fbd30c238" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__19_09_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2023__11__13__19_09__Changes_.xml" beforeDir="false" />
+    <list default="true" id="51b73394-c481-4e9c-8c95-c585216fe0a8" name="Changes" comment="Added theme selector">
+      <change afterPath="$PROJECT_DIR$/src/main/java/chessai/chessai/lib/PGNBuilder.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/5/2/529fd6579586c8ae9ecd04f247679c0fbd30c238" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/5/2/529fd6579586c8ae9ecd04f247679c0fbd30c238" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/9/5/9526e5f94c596518bf628d3b838151683c8c5689" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/9/5/9526e5f94c596518bf628d3b838151683c8c5689" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/issuestore/index.pb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/sonarlint/securityhotspotstore/index.pb" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/sonarlint/securityhotspotstore/index.pb" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/settings.dat" beforeDir="false" afterPath="$PROJECT_DIR$/settings.dat" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/chessai/chessai/engine/MinimaxEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/chessai/chessai/engine/MinimaxEngine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/chessai/chessai/swing_ui/Menu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/chessai/chessai/swing_ui/Menu.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/chessai/chessai/lib/Board.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/chessai/chessai/lib/Board.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -76,27 +70,27 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SONARLINT_PRECOMMIT_ANALYSIS": "false",
-    "WebServerToolWindowFactoryState": "false",
-    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
-    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
-    "extract.method.default.visibility": "private",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "E:/chess-ai/chessai/src/test/java/chessai/chessai",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "run.code.analysis.last.selected.profile": "pProject Default",
-    "settings.editor.selected.configurable": "inlay.hints",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SONARLINT_PRECOMMIT_ANALYSIS&quot;: &quot;false&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
+    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
+    &quot;extract.method.default.visibility&quot;: &quot;private&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;E:/chess-ai/chessai/src/test/java/chessai/chessai&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CreateClassDialog.RecentsKey">
       <recent name="chessai.chessai.swing_ui" />
@@ -315,15 +309,8 @@
       <workItem from="1698757747299" duration="2193000" />
       <workItem from="1699000536746" duration="6145000" />
       <workItem from="1699379147998" duration="9670000" />
-      <workItem from="1700555960910" duration="4578000" />
-    </task>
-    <task id="LOCAL-00010" summary="Updated onCommit actions">
-      <option name="closed" value="true" />
-      <created>1695838662266</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1695838662266</updated>
+      <workItem from="1700555960910" duration="7116000" />
+      <workItem from="1700566356572" duration="23000" />
     </task>
     <task id="LOCAL-00011" summary="Added GameManager and simplified resource loading">
       <option name="closed" value="true" />
@@ -709,7 +696,15 @@
       <option name="project" value="LOCAL" />
       <updated>1700506888841</updated>
     </task>
-    <option name="localTasksCounter" value="59" />
+    <task id="LOCAL-00059" summary="Added theme selector">
+      <option name="closed" value="true" />
+      <created>1700561305879</created>
+      <option name="number" value="00059" />
+      <option name="presentableId" value="LOCAL-00059" />
+      <option name="project" value="LOCAL" />
+      <updated>1700561305880</updated>
+    </task>
+    <option name="localTasksCounter" value="60" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -727,7 +722,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="Fixed some bugs, but it is not yet near..." />
     <MESSAGE value="All tests pass!!!" />
     <MESSAGE value="Double check is now correctly determined" />
     <MESSAGE value="Random bullshit that sonarlint added" />
@@ -752,7 +746,8 @@
     <MESSAGE value="Added move ordering for monte carlo engine" />
     <MESSAGE value="Implemented delta pruning (but it seems too good...)" />
     <MESSAGE value="Stabilized minimax engine" />
-    <option name="LAST_COMMIT_MESSAGE" value="Stabilized minimax engine" />
+    <MESSAGE value="Added theme selector" />
+    <option name="LAST_COMMIT_MESSAGE" value="Added theme selector" />
     <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
     <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
   </component>
